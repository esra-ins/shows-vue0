{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineStore } from 'pinia';\nimport env from '@/env.js';\nimport { ref } from 'vue';\nexport const useMovieStore = defineStore('movieStore', {\n  state: () => ({\n    movies: [],\n    popularShowsUrl: `${env.baseUrl}tv/popular?${env.apikey}`,\n    favMovies: JSON.parse(localStorage.getItem('favorite-movies')) || [],\n    isFav: false\n  }),\n  actions: {\n    async getMovies() {\n      const res = await fetch(this.popularShowsUrl);\n      const data = await res.json();\n      this.movies = data.results;\n      // console.log(\"this.movies  = \", this.movies)\n    },\n\n    //addToFavs(fav){\n    // this.favMovies.push(fav);\n    // console.log(\"favmovies  \", this.favMovies)\n    //},\n    isFavActive(movie) {\n      /*\n      console.log(this.favMovies)\n       console.log(movie.name)\n       console.log(JSON.parse(JSON.stringify(this.favMovies)));\n       console.log(typeof JSON.parse(JSON.stringify(this.favMovies)))\n      */\n\n      console.log('-----------');\n      function json2array(json) {\n        var result = [];\n        var keys = Object.keys(json);\n        keys.forEach(function (key) {\n          //index === 1 && result.push(json[key]);\n          result.push(json[key]);\n        });\n        return result;\n      }\n      const array0 = json2array(JSON.parse(JSON.stringify(this.favMovies)));\n\n      //const array0 = Object.entries(JSON.parse(JSON.stringify(this.favMovies)));\n\n      console.log(Object.values(array0));\n      console.log(typeof Object.values(array0));\n      if (array0) {\n        return Object.values(array0).some(item => {\n          // item.id === movie.id && console.log('----------------matched');\n\n          return item.id === movie.id;\n        });\n      }\n      return array0.includes(movie);\n\n      //return this.favMovies.includes(movie);\n    },\n\n    toggleFav(movie) {\n      const isFavorite = ref(Boolean);\n      isFavorite.value = this.favMovies.includes(movie);\n      //console.log(this.favMovies.includes(movie))\n\n      if (isFavorite.value) {\n        //const newFavMovies= this.favMovies.filter(m=>m.id!==movie.id);\n        this.favMovies = this.favMovies.filter(m => m.id !== movie.id);\n\n        //this.favMovies=newFavMovies;\n\n        //console.log(\"newss\",newFavMovies);\n        isFavorite.value = false;\n        //console.log(\"if içinde \",isFavorite.value);\n      } else {\n        this.favMovies.push(movie);\n        isFavorite.value = true;\n        // console.log(\"else içinde\",isFavorite.value);\n      }\n\n      this.isFav = isFavorite.value;\n      const favoritesObject = JSON.parse(JSON.stringify(this.favMovies));\n      localStorage.setItem('favorite-movies', JSON.stringify(favoritesObject));\n\n      // console.log(\"list2 =\", this.favMovies)\n      // console.log('------0');\n      // console.log(typeof favoritesObject);\n      // console.log(JSON.stringify(favoritesObject))\n      // console.log(JSON.parse(localStorage.getItem('favorite-movies')));\n    }\n  }\n});\n\n//const popularShowsUrl=`${env.baseUrl}tv/popular?${env.apikey}`;\n//fetch(popularShowsUrl).then(response=>response.json()).then(data=>{\n// popularShows.value=data.results;\n// console.log(popularShows.value);\n//})","map":{"version":3,"names":["defineStore","env","ref","useMovieStore","state","movies","popularShowsUrl","baseUrl","apikey","favMovies","JSON","parse","localStorage","getItem","isFav","actions","getMovies","res","fetch","data","json","results","isFavActive","movie","console","log","json2array","result","keys","Object","forEach","key","push","array0","stringify","values","some","item","id","includes","toggleFav","isFavorite","Boolean","value","filter","m","favoritesObject","setItem"],"sources":["/home/esraisik/Desktop/shows-vue0-main/src/stores/MovieStore.js"],"sourcesContent":["import { defineStore } from 'pinia';\nimport env from '@/env.js';\nimport { ref } from 'vue';\n\nexport const useMovieStore = defineStore('movieStore', {\n    state: () => ({\n        movies: [],\n        popularShowsUrl: `${env.baseUrl}tv/popular?${env.apikey}`,\n        favMovies: JSON.parse(localStorage.getItem('favorite-movies')) || [],\n        isFav: false,\n    }),\n    actions: {\n        async getMovies(){\n            const res = await fetch(this.popularShowsUrl);\n            const data = await res.json();\n\n            this.movies = data.results;\n            // console.log(\"this.movies  = \", this.movies)\n        },\n\n        //addToFavs(fav){\n          // this.favMovies.push(fav);\n          // console.log(\"favmovies  \", this.favMovies)\n        //},\n       isFavActive(movie){\n        /*\n        console.log(this.favMovies)\n\n        console.log(movie.name)\n\n        console.log(JSON.parse(JSON.stringify(this.favMovies)));\n\n        console.log(typeof JSON.parse(JSON.stringify(this.favMovies)))\n        */\n\n        console.log('-----------');\n\n        function json2array(json){\n            var result = [];\n            var keys = Object.keys(json);\n\n            keys.forEach(function(key){\n                //index === 1 && result.push(json[key]);\n                result.push(json[key]);\n            });\n\n            return result;\n        }\n\n        const array0 = json2array(JSON.parse(JSON.stringify(this.favMovies)))\n\n        //const array0 = Object.entries(JSON.parse(JSON.stringify(this.favMovies)));\n        \n        console.log(Object.values(array0));\n        console.log(typeof Object.values(array0));\n\n\n        if (array0) {\n            return Object.values(array0).some((item) => {\n                // item.id === movie.id && console.log('----------------matched');\n\n                return item.id === movie.id;\n            });\n        }\n        return array0.includes(movie);\n\n              //return this.favMovies.includes(movie);\n        },\n        toggleFav(movie){\n           const isFavorite=ref(Boolean);\n           isFavorite.value= this.favMovies.includes(movie);\n           //console.log(this.favMovies.includes(movie))\n\n           if(isFavorite.value){\n           \n            //const newFavMovies= this.favMovies.filter(m=>m.id!==movie.id);\n            this.favMovies= this.favMovies.filter(m=>m.id!==movie.id);\n\n            //this.favMovies=newFavMovies;\n\n            //console.log(\"newss\",newFavMovies);\n            isFavorite.value=false;\n             //console.log(\"if içinde \",isFavorite.value);\n             \n           }\n           else{\n           this.favMovies.push(movie);\n           isFavorite.value=true;\n            // console.log(\"else içinde\",isFavorite.value);\n           }\n           this.isFav = isFavorite.value;\n\n           const favoritesObject = JSON.parse(JSON.stringify(this.favMovies));\n\n           localStorage.setItem('favorite-movies', JSON.stringify(favoritesObject));\n\n           // console.log(\"list2 =\", this.favMovies)\n           // console.log('------0');\n           // console.log(typeof favoritesObject);\n           // console.log(JSON.stringify(favoritesObject))\n           // console.log(JSON.parse(localStorage.getItem('favorite-movies')));\n        }\n    }\n})\n\n\n\n//const popularShowsUrl=`${env.baseUrl}tv/popular?${env.apikey}`;\n//fetch(popularShowsUrl).then(response=>response.json()).then(data=>{\n   // popularShows.value=data.results;\n   // console.log(popularShows.value);\n//})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}