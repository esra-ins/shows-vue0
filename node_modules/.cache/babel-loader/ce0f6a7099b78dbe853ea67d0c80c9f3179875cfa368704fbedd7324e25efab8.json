{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineStore } from 'pinia';\nimport env from '@/env.js';\nimport { ref } from 'vue';\nexport const useMovieStore = defineStore('movieStore', {\n  state: () => ({\n    movies: [],\n    popularShowsUrl: `${env.baseUrl}tv/popular?${env.apikey}`,\n    favMovies: JSON.parse(localStorage.getItem('favorited-movies')) || [],\n    isFav: false\n    //iFav:false\n  }),\n\n  actions: {\n    //const popularShowsUrl=`${env.baseUrl}tv/popular?${env.apikey}`;\n\n    async getMovies() {\n      const res = await fetch(this.popularShowsUrl);\n      const data = await res.json();\n      //console.log(\"data from action = \",data.results);\n      this.movies = data.results;\n      //console.log(\"this.movies  = \",this.movies)\n    },\n\n    //addToFavs(fav){\n    // this.favMovies.push(fav);\n    // console.log(\"favmovies  \", this.favMovies)\n    //},\n    isFavActive(movie) {\n      /*\n      console.log(this.favMovies)\n       console.log(movie.name)\n       console.log(JSON.parse(JSON.stringify(this.favMovies)));\n       console.log(typeof JSON.parse(JSON.stringify(this.favMovies)))\n      */\n\n      console.log('-----------');\n      //const array0 = Object.entries(JSON.parse(JSON.stringify(this.favMovies)));\n\n      function json2array(json) {\n        var result = [];\n        var keys = Object.keys(json);\n        keys.forEach(function (key, index) {\n          index === 1 && result.push(json[key]);\n        });\n        return result;\n      }\n      const array0 = json2array(JSON.parse(JSON.stringify(this.favMovies)));\n      console.log(Object.values(array0));\n      console.log(typeof Object.values(array0));\n      return array0.includes(movie);\n\n      //return this.favMovies.includes(movie);\n    },\n\n    toggleFav(movie) {\n      const isFavo = ref(Boolean);\n      isFavo.value = this.favMovies.includes(movie);\n      //console.log(this.favMovies.includes(movie))\n\n      if (isFavo.value) {\n        //const newFavMovies= this.favMovies.filter(m=>m.id!==movie.id);\n        this.favMovies = this.favMovies.filter(m => m.id !== movie.id);\n\n        //this.favMovies=newFavMovies;\n\n        //console.log(\"newss\",newFavMovies);\n        isFavo.value = false;\n        //console.log(\"if içinde \",isFavo.value);\n      } else {\n        this.favMovies.push(movie);\n        isFavo.value = true;\n        // console.log(\"else içinde\",isFavo.value);\n      }\n\n      this.isFav = isFavo.value;\n      console.log(\"list2 =\", this.favMovies);\n      //return isFavo;\n      //return this.isFav;\n\n      const favoritesObject = JSON.parse(JSON.stringify(this.favMovies));\n      console.log('------0');\n      //console.log(Object.values(JSON.parse(JSON.stringify(this.favMovies))))\n      //console.log(typeof this.favMovies);\n\n      console.log(favoritesObject);\n      console.log(typeof favoritesObject);\n      console.log(JSON.stringify(favoritesObject));\n      localStorage.setItem('favorited-movies', JSON.stringify(favoritesObject));\n      console.log(JSON.parse(localStorage.getItem('favorited-movies')));\n    }\n  }\n});\n\n//const popularShowsUrl=`${env.baseUrl}tv/popular?${env.apikey}`;\n//fetch(popularShowsUrl).then(response=>response.json()).then(data=>{\n// popularShows.value=data.results;\n// console.log(popularShows.value);\n//})","map":{"version":3,"names":["defineStore","env","ref","useMovieStore","state","movies","popularShowsUrl","baseUrl","apikey","favMovies","JSON","parse","localStorage","getItem","isFav","actions","getMovies","res","fetch","data","json","results","isFavActive","movie","console","log","json2array","result","keys","Object","forEach","key","index","push","array0","stringify","values","includes","toggleFav","isFavo","Boolean","value","filter","m","id","favoritesObject","setItem"],"sources":["/home/esraisik/Desktop/shows-vue0-main/src/stores/MovieStore.js"],"sourcesContent":["import {defineStore} from 'pinia'\nimport env from '@/env.js';\nimport {ref} from 'vue';\n\nexport const useMovieStore=defineStore('movieStore',{\n    state:()=>({\n        movies:[],\n        popularShowsUrl:`${env.baseUrl}tv/popular?${env.apikey}`,\n        favMovies: JSON.parse(localStorage.getItem('favorited-movies')) || [],\n        isFav:false,\n        //iFav:false\n\n    }),\n    actions: {\n//const popularShowsUrl=`${env.baseUrl}tv/popular?${env.apikey}`;\n\n        async getMovies(){\n            const res=await fetch(this.popularShowsUrl);\n            const data=await res.json();\n            //console.log(\"data from action = \",data.results);\n            this.movies=data.results;\n            //console.log(\"this.movies  = \",this.movies)\n        },\n\n        //addToFavs(fav){\n          // this.favMovies.push(fav);\n          // console.log(\"favmovies  \", this.favMovies)\n        //},\n       isFavActive(movie){\n        /*\n        console.log(this.favMovies)\n\n        console.log(movie.name)\n\n        console.log(JSON.parse(JSON.stringify(this.favMovies)));\n\n        console.log(typeof JSON.parse(JSON.stringify(this.favMovies)))\n        */\n\n        console.log('-----------');\n        //const array0 = Object.entries(JSON.parse(JSON.stringify(this.favMovies)));\n\n        function json2array(json){\n            var result = [];\n            var keys = Object.keys(json);\n\n            keys.forEach(function(key, index){\n                index === 1 && result.push(json[key]);\n            });\n            return result;\n        }\n\n        const array0 = json2array(JSON.parse(JSON.stringify(this.favMovies)))\n\n        console.log(Object.values(array0));\n        console.log(typeof Object.values(array0));\n\n\n        return array0.includes(movie);\n\n              //return this.favMovies.includes(movie);\n        },\n        toggleFav(movie){\n           const isFavo=ref(Boolean);\n           isFavo.value= this.favMovies.includes(movie);\n           //console.log(this.favMovies.includes(movie))\n\n           if(isFavo.value){\n           \n            //const newFavMovies= this.favMovies.filter(m=>m.id!==movie.id);\n            this.favMovies= this.favMovies.filter(m=>m.id!==movie.id);\n\n            //this.favMovies=newFavMovies;\n\n            //console.log(\"newss\",newFavMovies);\n            isFavo.value=false;\n             //console.log(\"if içinde \",isFavo.value);\n             \n           }\n           else{\n           this.favMovies.push(movie);\n           isFavo.value=true;\n            // console.log(\"else içinde\",isFavo.value);\n           }\n           this.isFav=isFavo.value;\n           console.log(\"list2 =\",this.favMovies)\n           //return isFavo;\n           //return this.isFav;\n\n\n           const favoritesObject = JSON.parse(JSON.stringify(this.favMovies));\n\n           console.log('------0');\n           //console.log(Object.values(JSON.parse(JSON.stringify(this.favMovies))))\n           //console.log(typeof this.favMovies);\n\n           console.log(favoritesObject);\n\n           console.log(typeof favoritesObject);\n\n           console.log(JSON.stringify(favoritesObject))\n\n           localStorage.setItem('favorited-movies', JSON.stringify(favoritesObject));\n\n\n           console.log(JSON.parse(localStorage.getItem('favorited-movies')));\n        }\n    }\n})\n\n\n\n//const popularShowsUrl=`${env.baseUrl}tv/popular?${env.apikey}`;\n//fetch(popularShowsUrl).then(response=>response.json()).then(data=>{\n   // popularShows.value=data.results;\n   // console.log(popularShows.value);\n//})\n"],"mappings":";AAAA,SAAQA,WAAW,QAAO,OAAO;AACjC,OAAOC,GAAG,MAAM,UAAU;AAC1B,SAAQC,GAAG,QAAO,KAAK;AAEvB,OAAO,MAAMC,aAAa,GAACH,WAAW,CAAC,YAAY,EAAC;EAChDI,KAAK,EAACA,CAAA,MAAK;IACPC,MAAM,EAAC,EAAE;IACTC,eAAe,EAAE,GAAEL,GAAG,CAACM,OAAQ,cAAaN,GAAG,CAACO,MAAO,EAAC;IACxDC,SAAS,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC,CAAC,IAAI,EAAE;IACrEC,KAAK,EAAC;IACN;EAEJ,CAAC,CAAC;;EACFC,OAAO,EAAE;IACb;;IAEQ,MAAMC,SAASA,CAAA,EAAE;MACb,MAAMC,GAAG,GAAC,MAAMC,KAAK,CAAC,IAAI,CAACZ,eAAe,CAAC;MAC3C,MAAMa,IAAI,GAAC,MAAMF,GAAG,CAACG,IAAI,EAAE;MAC3B;MACA,IAAI,CAACf,MAAM,GAACc,IAAI,CAACE,OAAO;MACxB;IACJ,CAAC;;IAED;IACE;IACA;IACF;IACDC,WAAWA,CAACC,KAAK,EAAC;MACjB;AACR;AACA;AACA;AACA;AACA;;MAKQC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC1B;;MAEA,SAASC,UAAUA,CAACN,IAAI,EAAC;QACrB,IAAIO,MAAM,GAAG,EAAE;QACf,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACR,IAAI,CAAC;QAE5BQ,IAAI,CAACE,OAAO,CAAC,UAASC,GAAG,EAAEC,KAAK,EAAC;UAC7BA,KAAK,KAAK,CAAC,IAAIL,MAAM,CAACM,IAAI,CAACb,IAAI,CAACW,GAAG,CAAC,CAAC;QACzC,CAAC,CAAC;QACF,OAAOJ,MAAM;MACjB;MAEA,MAAMO,MAAM,GAAGR,UAAU,CAAChB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACyB,SAAS,CAAC,IAAI,CAAC1B,SAAS,CAAC,CAAC,CAAC;MAErEe,OAAO,CAACC,GAAG,CAACI,MAAM,CAACO,MAAM,CAACF,MAAM,CAAC,CAAC;MAClCV,OAAO,CAACC,GAAG,CAAC,OAAOI,MAAM,CAACO,MAAM,CAACF,MAAM,CAAC,CAAC;MAGzC,OAAOA,MAAM,CAACG,QAAQ,CAACd,KAAK,CAAC;;MAEvB;IACN,CAAC;;IACDe,SAASA,CAACf,KAAK,EAAC;MACb,MAAMgB,MAAM,GAACrC,GAAG,CAACsC,OAAO,CAAC;MACzBD,MAAM,CAACE,KAAK,GAAE,IAAI,CAAChC,SAAS,CAAC4B,QAAQ,CAACd,KAAK,CAAC;MAC5C;;MAEA,IAAGgB,MAAM,CAACE,KAAK,EAAC;QAEf;QACA,IAAI,CAAChC,SAAS,GAAE,IAAI,CAACA,SAAS,CAACiC,MAAM,CAACC,CAAC,IAAEA,CAAC,CAACC,EAAE,KAAGrB,KAAK,CAACqB,EAAE,CAAC;;QAEzD;;QAEA;QACAL,MAAM,CAACE,KAAK,GAAC,KAAK;QACjB;MAEF,CAAC,MACG;QACJ,IAAI,CAAChC,SAAS,CAACwB,IAAI,CAACV,KAAK,CAAC;QAC1BgB,MAAM,CAACE,KAAK,GAAC,IAAI;QAChB;MACD;;MACA,IAAI,CAAC3B,KAAK,GAACyB,MAAM,CAACE,KAAK;MACvBjB,OAAO,CAACC,GAAG,CAAC,SAAS,EAAC,IAAI,CAAChB,SAAS,CAAC;MACrC;MACA;;MAGA,MAAMoC,eAAe,GAAGnC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACyB,SAAS,CAAC,IAAI,CAAC1B,SAAS,CAAC,CAAC;MAElEe,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MACtB;MACA;;MAEAD,OAAO,CAACC,GAAG,CAACoB,eAAe,CAAC;MAE5BrB,OAAO,CAACC,GAAG,CAAC,OAAOoB,eAAe,CAAC;MAEnCrB,OAAO,CAACC,GAAG,CAACf,IAAI,CAACyB,SAAS,CAACU,eAAe,CAAC,CAAC;MAE5CjC,YAAY,CAACkC,OAAO,CAAC,kBAAkB,EAAEpC,IAAI,CAACyB,SAAS,CAACU,eAAe,CAAC,CAAC;MAGzErB,OAAO,CAACC,GAAG,CAACf,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC;IACpE;EACJ;AACJ,CAAC,CAAC;;AAIF;AACA;AACG;AACA;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}